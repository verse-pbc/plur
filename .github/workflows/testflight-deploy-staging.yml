name: TestFlight Staging Deployment
permissions:
  contents: write  # This is needed for tag pushing
on:
  #push:
  #  branches:
  #    - main
  # Enable manual run
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  fastlane-deploy:
    runs-on: macOS-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0  # Fetch all history for all tags and branches
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.2'
          bundler-cache: true
      
      - name: Clone Flutter SDK
        run: |
          git clone --branch dev https://github.com/flutter/flutter.git flutter
          cd flutter
          git fetch --tags --depth=1
          git checkout 3.32.0-0.3.pre
          ./bin/flutter precache --ios
      
      - name: Add Flutter to PATH
        run: echo "${{ github.workspace }}/flutter/bin" >> $GITHUB_PATH
      
      - name: Install Flutter Dependencies
        run: |
          flutter pub get
          flutter clean
          flutter pub get
      
      # Ensure Xcode 16.3 is selected
      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.3.app
      
      - name: Xcode version check
        run: xcodebuild -version
      
      # Create runner-staging scheme if it doesn't exist
      - name: Setup Xcode scheme
        run: |
          SCHEME_PATH="ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner-Staging.xcscheme"
          if [ ! -f "$SCHEME_PATH" ]; then
            echo "Creating Runner-Staging scheme from Runner scheme"
            cp ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme "$SCHEME_PATH"
            sed -i '' 's/buildConfiguration = "Debug"/buildConfiguration = "Debug-Runner-Staging"/g' "$SCHEME_PATH"
            sed -i '' 's/buildConfiguration = "Release"/buildConfiguration = "Release-Runner-Staging"/g' "$SCHEME_PATH"
          fi
      
      # Do a preliminary build to set up configurations
      - name: Preliminary Flutter build
        run: flutter build ios --release --no-codesign --flavor Runner-Staging --dart-define=ENVIRONMENT="staging"
        env:
          SENTRY_DSN: ${{secrets.SENTRY_DSN}}
      
      # Skip main building - let fastlane handle the build
      - uses: nomasystems/action-xcode-select@v0.1
        with:
          version: "16.3.0"
      
      # Pre-install pods to apply Sentry C++ fixes early
      - name: Install pods with Sentry fixes
        run: |
          cd ios
          pod install
          echo "Pods installed with Sentry C++ compatibility fixes"
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ Secrets.SSH_KEY }}
          known_hosts: ${{ Secrets.KNOWN_HOSTS }}
      
      - name: Check Xcode project structure
        run: |
          echo "Checking Xcode project structure..."
          ls -la ios/Runner.xcodeproj/xcshareddata/xcschemes/
          echo "Checking flutter build configurations..."
          ls -la ios/Flutter/
          
      - name: Fastlane build and deploy
        working-directory: ./fastlane
        run: |
          gem install bundler:2.4.22
          bundle install
          echo "Running fastlane with verbose output"
          bundle exec fastlane ios deploy_staging --verbose
        env:
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ Secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ Secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ Secrets.APP_STORE_CONNECT_API_KEY_ID }}
          MATCH_PASSWORD: ${{ Secrets.MATCH_PASSWORD }}
          KEYCHAIN_PASS: ${{ Secrets.KEYCHAIN_PASS }}
          SENTRY_AUTH: ${{ Secrets.SENTRY_AUTH }}
          APP_SECRETS: ${{ Secrets.APP_SECRETS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120
          FASTLANE_XCODE_LIST_TIMEOUT: 120
          FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 5
          GYM_BUILD_TIMEOUT: 3600
          CI: true
      
      - name: Upload build logs if failed
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: fastlane-logs
          path: |
            ~/Library/Logs/gym/*.log
            ~/Library/Logs/fastlane/*
      - name: Upload debug symbols to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
        run: dart run sentry_dart_plugin --sentry-define=auth_token="$SENTRY_AUTH_TOKEN"
