# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Work around
# https://github.com/fastlane/fastlane/issues/20919
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "60" 
CHANGELOG_PATH = "CHANGELOG.md"

platform :ios do
  asc_key_content = ENV["APP_STORE_CONNECT_API_KEY_CONTENT"] ? ENV["APP_STORE_CONNECT_API_KEY_CONTENT"].gsub('\n', "\n") : nil
  asc_issuer_id = ENV["APP_STORE_CONNECT_ISSUER_ID"]
  asc_key_id = ENV["APP_STORE_CONNECT_API_KEY_ID"]
  keychain_pass = ENV["KEYCHAIN_PASS"]
  sentry_auth = ENV["SENTRY_AUTH"]
  is_ci = ENV["CI"]
  app_secrets = ENV["APP_SECRETS"]

  desc "Push a new build to TestFlight using the provided scheme and identifier"
  private_lane :push_build do |options|
    xcode_version = File.read("../ios/.xcode-version").strip
    xcodes(version: xcode_version)
    
    if asc_key_id && asc_issuer_id && asc_key_content
      app_store_connect_api_key(
        key_id: asc_key_id,
        issuer_id: asc_issuer_id,
        key_content: asc_key_content
      )
    end
    
    if is_ci 
      # Create a keychain because Github Action machines don't come with one
      create_keychain(
          name: "keychain",
          password: keychain_pass,
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          lock_when_sleeps: false,
          add_to_search_list: true
      )
      match(
          type: "appstore",  
          readonly: true,
          app_identifier: options[:appidentifier],
          keychain_name: "keychain",
          keychain_password: keychain_pass,
          generate_apple_certs: true
        )
    else
      match(
        type: "appstore", 
        readonly: false,
        app_identifier: options[:appidentifier]
      )
    end
    version_info = flutter_version(pubspec_location: '../pubspec.yaml')
    version_number = version_info['version_name']
    build_number = latest_testflight_build_number(app_identifier: options[:appidentifier]) + 1
    increment_build_number(
      build_number: build_number,
      xcodeproj: "ios/Runner.xcodeproj"
    )
    
    # Use the specified configuration if provided, otherwise default to the scheme
    build_configuration = options[:configuration] || nil
    gym_options = {
      scheme: options[:scheme],
      workspace: "ios/Runner.xcworkspace",
      export_options: {
        method: "app-store",
        provisioningProfiles: {
          options[:appidentifier] => "match AppStore #{options[:appidentifier]}"
        }
      }
    }
    
    # Add configuration if specified
    gym_options[:configuration] = build_configuration if build_configuration
    
    gym(gym_options)

    testflight_groups = options[:distribution_groups] || []
    upload_to_testflight(
      changelog: cleaned_changelog,
      app_identifier: options[:appidentifier],
      skip_waiting_for_build_processing: is_ci,
      distribute_external: !testflight_groups.empty?,
      groups: testflight_groups 
    )
    
    add_git_tag(tag: "v#{version_number}-#{build_number}")
    push_git_tags
    notification(
      subtitle: "iOS Build uploaded", 
      message: "tap to open App Store Connect", 
      sound: "Pebble", 
      open: options[:appstoreconnect]
    )
  end

  desc "Push a new Plur Release build to TestFlight"
  lane :release do
    push_build(
      scheme: "Runner",
      appidentifier: "app.verse.prototype.plur",
      appstoreconnect: "https://appstoreconnect.apple.com/apps/6738932333/testflight/ios",
      distribution_groups: []
    )
  end

  desc "Push a new Plur staging build to TestFlight"
  lane :deploy_staging do
    ENV["XCODE_XCCONFIG_FILE"] = "#{Dir.pwd}/../ios/Flutter/Staging.xcconfig"
    push_build(
      scheme: "Runner-Staging",
      appidentifier: "app.verse.prototype.plur-staging",
      appstoreconnect: "https://appstoreconnect.apple.com/apps/6742746068/testflight/ios",
      distribution_groups: [],
      configuration: "Release-Runner-Staging"
    )
  end

  desc "Mark a deployed commit as having been deployed to our public beta testers"
  lane :stamp_release do
    changelog = read_changelog(changelog_path: CHANGELOG_PATH)
    version_info = flutter_version(
      pubspec_location: '../pubspec.yaml'
    )
    version_number = version_info['version_name']
    build_number = get_build_number(
      xcodeproj: "ios/Runner.xcodeproj"
    )
    stamp_changelog(changelog_path: CHANGELOG_PATH, section_identifier: "#{version_number}")
    git_commit(message: "Stamping beta deployment", path: "*")
    push_to_git_remote
  end

  desc "Refresh certificates in the match repo"
  lane :certs do
    if asc_key_id && asc_issuer_id && asc_key_content
      app_store_connect_api_key(
        key_id: asc_key_id,
        issuer_id: asc_issuer_id,
        key_content: asc_key_content
      )
    end
    match(type: "appstore", app_identifier: ["app.verse.prototype.plur", "app.verse.prototype.plur-staging", "app.verse.prototype.plur-dev"])
  end

  desc "Clean App Store Connect of certificates"
  lane :nuke_certs do
    if asc_key_id && asc_issuer_id && asc_key_content
      app_store_connect_api_key(
        key_id: asc_key_id,
        issuer_id: asc_issuer_id,
        key_content: asc_key_content
      )
    end
    match_nuke(type: "appstore")
  end
end

# Helper functions (shared between platforms)
def strip_markdown_links(text)
  # Remove markdown links of the form [text](url)
  text.gsub(/\[([^\]]*)\]\([^)]*\)/, '')
end

def cleaned_changelog
  changelog = read_changelog(changelog_path: CHANGELOG_PATH)
  strip_markdown_links(changelog)
end

# Add a custom action to get Flutter version info
def flutter_version(params)
  pubspec_path = params[:pubspec_location] || 'pubspec.yaml'
  pubspec_content = File.read(pubspec_path)
  version_match = pubspec_content.match(/version:\s+(\d+\.\d+\.\d+)(?:\+(\d+))?/)
  
  if version_match
    {
      'version_name' => version_match[1],
      'version_code' => version_match[2] || '1'  
    }
  else
    UI.user_error!("Could not find version information in pubspec.yaml")
  end
end 