import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http;
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:nostr_sdk/nostr_sdk.dart';
import 'package:nostr_sdk/relay/relay_info_util.dart';
import 'package:nostrmo/data/group_identifier_repository.dart';
import 'package:nostrmo/main.dart';
import 'package:nostrmo/provider/user_provider.dart';
import 'package:nostrmo/router/login/welcome_widget.dart';
import 'package:nostrmo/router/onboarding/onboarding_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'sign_up_test.mocks.dart'; // Ensure this file is generated by build_runner
import 'mocks/mock_firebase.dart';

@GenerateNiceMocks([
  MockSpec<http.Client>(),
  MockSpec<UserProvider>(),
  MockSpec<GroupIdentifierRepository>(),
])
void main() {
  TestWidgetsFlutterBinding.ensureInitialized();

  setUpAll(() async {
    await setupMockFirebase();

    SharedPreferences.setMockInitialValues({});

    sqfliteFfiInit();
    databaseFactory = databaseFactoryFfi;

    final httpClient = MockClient();
    when(httpClient.get(any, headers: anyNamed('headers')))
        .thenAnswer((invocation) async {
      const String json = '''
        {
          "name": "Nostr Groups Relay",
          "description": "A specialized relay implementing NIP-29 for Nostr group management",
          "pubkey": null,
          "contact": null,
          "supported_nips": [
            1,
            11,
            29,
            42
          ],
          "software": "groups_relay",
          "version": "0.1.0",
          "limitation": null,
          "posting_policy": null,
          "payments_url": null,
          "fees": null,
          "icon": null
        }
      ''';

      return http.Response(json, 200, headers: {
        'Content-Type': 'application/json',
      });
    });
    RelayInfoUtil.client = httpClient;

    await initializeProviders(isTesting: true);

    userProvider = MockUserProvider();

    await relayLocalDB?.close();
    relayLocalDB = null;
  });

  testWidgets('Sign Up flow with name input', (WidgetTester tester) async {
    final groupIdentifierRepository = MockGroupIdentifierRepository();
    when(groupIdentifierRepository.watchGroupIdentifierList())
        .thenAnswer((_) => Stream.value(<GroupIdentifier>[]));

    // Override the provider with the mocked repository
    final overrides = [
      groupIdentifierRepositoryProvider
          .overrideWithValue(groupIdentifierRepository),
    ];

    // Launch the app
    await tester.pumpWidget(ProviderScope(
      overrides: overrides,
      child: const MyApp(),
    ));
    await tester.pumpAndSettle();

    // Verify we're on the welcome screen
    expect(find.byType(WelcomeWidget), findsOneWidget);

    // Find and tap the Get Started button
    await tester.tap(find.byKey(const Key('create_profile_button')));
    await tester.pumpAndSettle();

    //// Verify we're on the onboarding screen with name input
    expect(find.byType(OnboardingWidget), findsOneWidget);
    expect(find.byKey(const Key('name_input_title')), findsOneWidget);

    //// Enter the name
    await tester.enterText(find.byKey(const Key('input')), 'Test User');
    await tester.pumpAndSettle();

    // Find and tap the continue button
    final continueTextFinder = find.text('Continue');
    expect(continueTextFinder, findsOneWidget);
    await tester.tap(continueTextFinder);
    //await tester.pumpAndSettle();

    // Verify we're on the communities screen
    //expect(find.byType(CommunitiesScreen), findsOneWidget);
  });
}
