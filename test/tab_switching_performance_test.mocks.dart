// Mocks generated by Mockito 5.4.4 from annotations
// in nostrmo/test/tab_switching_performance_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i12;

import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:nostr_sdk/nostr_sdk.dart' as _i2;
import 'package:nostrmo/data/custom_emoji.dart' as _i6;
import 'package:nostrmo/data/join_group_parameters.dart' as _i9;
import 'package:nostrmo/data/public_group_info.dart' as _i11;
import 'package:nostrmo/generated/l10n.dart' as _i7;
import 'package:nostrmo/provider/group_feed_provider.dart' as _i13;
import 'package:nostrmo/provider/list_provider.dart' as _i4;
import 'package:nostrmo/provider/settings_provider.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookmarks_0 extends _i1.SmartFake implements _i2.Bookmarks {
  _FakeBookmarks_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEventMemBox_1 extends _i1.SmartFake implements _i2.EventMemBox {
  _FakeEventMemBox_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingData_2 extends _i1.SmartFake implements _i3.SettingData {
  _FakeSettingData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ListProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockListProvider extends _i1.Mock implements _i4.ListProvider {
  MockListProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get emojiKey => (super.noSuchMethod(
        Invocation.getter(#emojiKey),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#emojiKey),
        ),
      ) as String);

  @override
  String get bookmarksKey => (super.noSuchMethod(
        Invocation.getter(#bookmarksKey),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#bookmarksKey),
        ),
      ) as String);

  @override
  List<_i2.GroupIdentifier> get groupIdentifiers => (super.noSuchMethod(
        Invocation.getter(#groupIdentifiers),
        returnValue: <_i2.GroupIdentifier>[],
      ) as List<_i2.GroupIdentifier>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool privateBookmarkContains(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #privateBookmarkContains,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool publicBookmarkContains(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #publicBookmarkContains,
          [eventId],
        ),
        returnValue: false,
      ) as bool);

  @override
  void load(
    String? pubkey,
    List<int>? kinds, {
    _i2.Nostr? targetNostr,
    bool? initQuery = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #load,
          [
            pubkey,
            kinds,
          ],
          {
            #targetNostr: targetNostr,
            #initQuery: initQuery,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.Event? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<MapEntry<String, List<_i6.CustomEmoji>>> emojis(
    _i7.S? localization,
    _i2.Event? emojiEvent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #emojis,
          [
            localization,
            emojiEvent,
          ],
        ),
        returnValue: <MapEntry<String, List<_i6.CustomEmoji>>>[],
      ) as List<MapEntry<String, List<_i6.CustomEmoji>>>);

  @override
  void addCustomEmoji(_i6.CustomEmoji? emoji) => super.noSuchMethod(
        Invocation.method(
          #addCustomEmoji,
          [emoji],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Bookmarks getBookmarks() => (super.noSuchMethod(
        Invocation.method(
          #getBookmarks,
          [],
        ),
        returnValue: _FakeBookmarks_0(
          this,
          Invocation.method(
            #getBookmarks,
            [],
          ),
        ),
      ) as _i2.Bookmarks);

  @override
  _i8.Future<_i2.Bookmarks?> parseBookmarks() => (super.noSuchMethod(
        Invocation.method(
          #parseBookmarks,
          [],
        ),
        returnValue: _i8.Future<_i2.Bookmarks?>.value(),
      ) as _i8.Future<_i2.Bookmarks?>);

  @override
  void addPrivateBookmark(_i2.BookmarkItem? bookmarkItem) => super.noSuchMethod(
        Invocation.method(
          #addPrivateBookmark,
          [bookmarkItem],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPublicBookmark(_i2.BookmarkItem? bookmarkItem) => super.noSuchMethod(
        Invocation.method(
          #addPublicBookmark,
          [bookmarkItem],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePrivateBookmark(String? value) => super.noSuchMethod(
        Invocation.method(
          #removePrivateBookmark,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removePublicBookmark(String? value) => super.noSuchMethod(
        Invocation.method(
          #removePublicBookmark,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void saveBookmarks(_i2.Bookmarks? bookmarks) => super.noSuchMethod(
        Invocation.method(
          #saveBookmarks,
          [bookmarks],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool checkPublicBookmark(_i2.BookmarkItem? item) => (super.noSuchMethod(
        Invocation.method(
          #checkPublicBookmark,
          [item],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool checkPrivateBookmark(_i2.BookmarkItem? item) => (super.noSuchMethod(
        Invocation.method(
          #checkPrivateBookmark,
          [item],
        ),
        returnValue: false,
      ) as bool);

  @override
  void joinGroup(
    _i9.JoinGroupParameters? request, {
    _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #joinGroup,
          [request],
          {#context: context},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isGroupMember(_i9.JoinGroupParameters? request) => (super.noSuchMethod(
        Invocation.method(
          #isGroupMember,
          [request],
        ),
        returnValue: false,
      ) as bool);

  @override
  void joinGroups(
    List<_i9.JoinGroupParameters>? requests, {
    _i10.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #joinGroups,
          [requests],
          {#context: context},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void leaveGroup(_i2.GroupIdentifier? gi) => super.noSuchMethod(
        Invocation.method(
          #leaveGroup,
          [gi],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<(String?, _i2.GroupIdentifier?)> createGroupAndGenerateInvite(
          String? groupName) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGroupAndGenerateInvite,
          [groupName],
        ),
        returnValue:
            _i8.Future<(String?, _i2.GroupIdentifier?)>.value((null, null)),
      ) as _i8.Future<(String?, _i2.GroupIdentifier?)>);

  @override
  String createInviteLink(
    _i2.GroupIdentifier? group,
    String? inviteCode, {
    List<String>? roles,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInviteLink,
          [
            group,
            inviteCode,
          ],
          {#roles: roles},
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #createInviteLink,
            [
              group,
              inviteCode,
            ],
            {#roles: roles},
          ),
        ),
      ) as String);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleGroupDeleteEvent(_i2.Event? event) => super.noSuchMethod(
        Invocation.method(
          #handleGroupDeleteEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleAdminMembershipEvent(_i2.Event? event) => super.noSuchMethod(
        Invocation.method(
          #handleAdminMembershipEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handleEditMetadataEvent(_i2.Event? event) => super.noSuchMethod(
        Invocation.method(
          #handleEditMetadataEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<List<_i11.PublicGroupInfo>> queryPublicGroups(
          List<String>? relays) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryPublicGroups,
          [relays],
        ),
        returnValue: _i8.Future<List<_i11.PublicGroupInfo>>.value(
            <_i11.PublicGroupInfo>[]),
      ) as _i8.Future<List<_i11.PublicGroupInfo>>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GroupFeedProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockGroupFeedProvider extends _i1.Mock implements _i13.GroupFeedProvider {
  MockGroupFeedProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.EventMemBox get notesBox => (super.noSuchMethod(
        Invocation.getter(#notesBox),
        returnValue: _FakeEventMemBox_1(
          this,
          Invocation.getter(#notesBox),
        ),
      ) as _i2.EventMemBox);

  @override
  set notesBox(_i2.EventMemBox? _notesBox) => super.noSuchMethod(
        Invocation.setter(
          #notesBox,
          _notesBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.EventMemBox get newNotesBox => (super.noSuchMethod(
        Invocation.getter(#newNotesBox),
        returnValue: _FakeEventMemBox_1(
          this,
          Invocation.getter(#newNotesBox),
        ),
      ) as _i2.EventMemBox);

  @override
  set newNotesBox(_i2.EventMemBox? _newNotesBox) => super.noSuchMethod(
        Invocation.setter(
          #newNotesBox,
          _newNotesBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get subscribeId => (super.noSuchMethod(
        Invocation.getter(#subscribeId),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#subscribeId),
        ),
      ) as String);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  int get laterTimeMS => (super.noSuchMethod(
        Invocation.getter(#laterTimeMS),
        returnValue: 0,
      ) as int);

  @override
  set laterTimeMS(int? _laterTimeMS) => super.noSuchMethod(
        Invocation.setter(
          #laterTimeMS,
          _laterTimeMS,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get latering => (super.noSuchMethod(
        Invocation.getter(#latering),
        returnValue: false,
      ) as bool);

  @override
  set latering(bool? _latering) => super.noSuchMethod(
        Invocation.setter(
          #latering,
          _latering,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.Event> get pendingEvents => (super.noSuchMethod(
        Invocation.getter(#pendingEvents),
        returnValue: <_i2.Event>[],
      ) as List<_i2.Event>);

  @override
  set pendingEvents(List<_i2.Event>? _pendingEvents) => super.noSuchMethod(
        Invocation.setter(
          #pendingEvents,
          _pendingEvents,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearData({bool? preserveCache = false}) => super.noSuchMethod(
        Invocation.method(
          #clearData,
          [],
          {#preserveCache: preserveCache},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onNewEvent(_i2.Event? e) => super.noSuchMethod(
        Invocation.method(
          #onNewEvent,
          [e],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void mergeNewEvent() => super.noSuchMethod(
        Invocation.method(
          #mergeNewEvent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void doQuery(int? until) => super.noSuchMethod(
        Invocation.method(
          #doQuery,
          [until],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.Event? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isGroupNote(_i2.Event? e) => (super.noSuchMethod(
        Invocation.method(
          #isGroupNote,
          [e],
        ),
        returnValue: false,
      ) as bool);

  @override
  void deleteEvent(_i2.Event? e) => super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [e],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void refresh() => super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void subscribe() => super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void later(
    _i2.Event? event,
    dynamic Function(List<_i2.Event>)? func,
    Function? completeFunc,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #later,
          [
            event,
            func,
            completeFunc,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disposeLater() => super.noSuchMethod(
        Invocation.method(
          #disposeLater,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SettingsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsProvider extends _i1.Mock implements _i3.SettingsProvider {
  MockSettingsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get privateKeyMap => (super.noSuchMethod(
        Invocation.getter(#privateKeyMap),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set nwcUrl(String? o) => super.noSuchMethod(
        Invocation.setter(
          #nwcUrl,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SettingData get settingData => (super.noSuchMethod(
        Invocation.getter(#settingData),
        returnValue: _FakeSettingData_2(
          this,
          Invocation.getter(#settingData),
        ),
      ) as _i3.SettingData);

  @override
  int get lockOpen => (super.noSuchMethod(
        Invocation.getter(#lockOpen),
        returnValue: 0,
      ) as int);

  @override
  int get linkPreview => (super.noSuchMethod(
        Invocation.getter(#linkPreview),
        returnValue: 0,
      ) as int);

  @override
  int get videoPreviewInList => (super.noSuchMethod(
        Invocation.getter(#videoPreviewInList),
        returnValue: 0,
      ) as int);

  @override
  int get imgCompress => (super.noSuchMethod(
        Invocation.getter(#imgCompress),
        returnValue: 0,
      ) as int);

  @override
  int get themeStyle => (super.noSuchMethod(
        Invocation.getter(#themeStyle),
        returnValue: 0,
      ) as int);

  @override
  double get fontSize => (super.noSuchMethod(
        Invocation.getter(#fontSize),
        returnValue: 0.0,
      ) as double);

  @override
  int get webviewAppbarOpen => (super.noSuchMethod(
        Invocation.getter(#webviewAppbarOpen),
        returnValue: 0,
      ) as int);

  @override
  set settingData(_i3.SettingData? o) => super.noSuchMethod(
        Invocation.setter(
          #settingData,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set privateKeyIndex(int? o) => super.noSuchMethod(
        Invocation.setter(
          #privateKeyIndex,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set lockOpen(int? o) => super.noSuchMethod(
        Invocation.setter(
          #lockOpen,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set defaultIndex(int? o) => super.noSuchMethod(
        Invocation.setter(
          #defaultIndex,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set defaultTab(int? o) => super.noSuchMethod(
        Invocation.setter(
          #defaultTab,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set linkPreview(int? o) => super.noSuchMethod(
        Invocation.setter(
          #linkPreview,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set videoPreviewInList(int? o) => super.noSuchMethod(
        Invocation.setter(
          #videoPreviewInList,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set network(String? o) => super.noSuchMethod(
        Invocation.setter(
          #network,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set imageService(String? o) => super.noSuchMethod(
        Invocation.setter(
          #imageService,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set imageServiceAddr(String? o) => super.noSuchMethod(
        Invocation.setter(
          #imageServiceAddr,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set videoPreview(int? o) => super.noSuchMethod(
        Invocation.setter(
          #videoPreview,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set imagePreview(int? o) => super.noSuchMethod(
        Invocation.setter(
          #imagePreview,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set profilePicturePreview(int? o) => super.noSuchMethod(
        Invocation.setter(
          #profilePicturePreview,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set i18n(String? o) => super.noSuchMethod(
        Invocation.setter(
          #i18n,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set imgCompress(int? o) => super.noSuchMethod(
        Invocation.setter(
          #imgCompress,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set themeStyle(int? o) => super.noSuchMethod(
        Invocation.setter(
          #themeStyle,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set themeColor(int? o) => super.noSuchMethod(
        Invocation.setter(
          #themeColor,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set mainFontColor(int? o) => super.noSuchMethod(
        Invocation.setter(
          #mainFontColor,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set hintFontColor(int? o) => super.noSuchMethod(
        Invocation.setter(
          #hintFontColor,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cardColor(int? o) => super.noSuchMethod(
        Invocation.setter(
          #cardColor,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set backgroundImage(String? o) => super.noSuchMethod(
        Invocation.setter(
          #backgroundImage,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fontFamily(String? fontFamily) => super.noSuchMethod(
        Invocation.setter(
          #fontFamily,
          fontFamily,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set openTranslate(int? o) => super.noSuchMethod(
        Invocation.setter(
          #openTranslate,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set translateSourceArgs(String? o) => super.noSuchMethod(
        Invocation.setter(
          #translateSourceArgs,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set translateTarget(String? o) => super.noSuchMethod(
        Invocation.setter(
          #translateTarget,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set broadcaseWhenBoost(int? o) => super.noSuchMethod(
        Invocation.setter(
          #broadcaseWhenBoost,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fontSize(double? o) => super.noSuchMethod(
        Invocation.setter(
          #fontSize,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set webviewAppbarOpen(int? o) => super.noSuchMethod(
        Invocation.setter(
          #webviewAppbarOpen,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tableMode(int? o) => super.noSuchMethod(
        Invocation.setter(
          #tableMode,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set autoOpenSensitive(int? o) => super.noSuchMethod(
        Invocation.setter(
          #autoOpenSensitive,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relayLocal(int? o) => super.noSuchMethod(
        Invocation.setter(
          #relayLocal,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set relayMode(int? o) => super.noSuchMethod(
        Invocation.setter(
          #relayMode,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set eventSignCheck(int? o) => super.noSuchMethod(
        Invocation.setter(
          #eventSignCheck,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limitNoteHeight(int? o) => super.noSuchMethod(
        Invocation.setter(
          #limitNoteHeight,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set threadMode(int? o) => super.noSuchMethod(
        Invocation.setter(
          #threadMode,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxSubEventLevel(int? o) => super.noSuchMethod(
        Invocation.setter(
          #maxSubEventLevel,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set hideRelayNotices(int? o) => super.noSuchMethod(
        Invocation.setter(
          #hideRelayNotices,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set openBlurhashImage(int? o) => super.noSuchMethod(
        Invocation.setter(
          #openBlurhashImage,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set wotFilter(int? o) => super.noSuchMethod(
        Invocation.setter(
          #wotFilter,
          o,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  int addAndChangePrivateKey(
    String? pk, {
    bool? updateUI = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAndChangePrivateKey,
          [pk],
          {#updateUI: updateUI},
        ),
        returnValue: 0,
      ) as int);

  @override
  void removeKey(int? index) => super.noSuchMethod(
        Invocation.method(
          #removeKey,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool translateSourceArgsCheck(String? str) => (super.noSuchMethod(
        Invocation.method(
          #translateSourceArgsCheck,
          [str],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setI18n(
    String? i18n,
    String? i18nCC,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setI18n,
          [
            i18n,
            i18nCC,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> saveAndNotifyListeners({bool? updateUI = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAndNotifyListeners,
          [],
          {#updateUI: updateUI},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
