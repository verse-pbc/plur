# Task ID: 30
# Title: Implement Offline-First Functionality
# Status: pending
# Dependencies: 14, 15, 17, 18, 19
# Priority: high
# Description: Ensure the application works seamlessly offline with data synchronization when connectivity is restored.
# Details:
1. Implement offline data storage using IndexedDB
2. Create synchronization queue for offline actions
3. Develop conflict resolution strategies
4. Add offline indicators in UI
5. Implement background sync using service workers

Offline-first implementation:
```javascript
const syncQueue = [];

const addToSyncQueue = async (action) => {
  syncQueue.push({
    id: generateUniqueId(),
    action,
    createdAt: Date.now(),
    attempts: 0
  });
  
  await storeSyncQueue(syncQueue);
  
  // Register for background sync if available
  if ('serviceWorker' in navigator && 'SyncManager' in window) {
    const registration = await navigator.serviceWorker.ready;
    await registration.sync.register('sync-data');
  }
};

const processOfflineAction = async (action) => {
  switch (action.type) {
    case 'CREATE_POST':
      return createPublicPost(action.content, action.tags, action.replyTo);
    
    case 'SEND_GROUP_MESSAGE':
      return sendGroupMessage(action.groupId, action.content, action.senderKeys);
    
    case 'ADD_CONTACT':
      return addToRolodex(action.contact);
    
    case 'SEND_PAYMENT':
      return sendCashu(action.amount, action.recipient, action.memo);
    
    default:
      throw new Error(`Unknown action type: ${action.type}`);
  }
};

const processSyncQueue = async () => {
  if (!navigator.onLine) return;
  
  const queue = [...syncQueue];
  
  for (const item of queue) {
    try {
      await processOfflineAction(item.action);
      
      // Remove from queue on success
      const index = syncQueue.findIndex(i => i.id === item.id);
      if (index >= 0) {
        syncQueue.splice(index, 1);
      }
    } catch (error) {
      console.error(`Failed to process sync item ${item.id}:`, error);
      
      // Increment attempt count
      item.attempts += 1;
      
      // Remove from queue after too many attempts
      if (item.attempts >= 5) {
        const index = syncQueue.findIndex(i => i.id === item.id);
        if (index >= 0) {
          syncQueue.splice(index, 1);
        }
      }
    }
  }
  
  await storeSyncQueue(syncQueue);
};

// Listen for online events
window.addEventListener('online', processSyncQueue);

// Service worker sync handler
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-data') {
    event.waitUntil(processSyncQueue());
  }
});
```

# Test Strategy:
1. Test application functionality with network disabled
2. Verify data synchronization when connectivity is restored
3. Test conflict resolution with concurrent changes
4. Validate offline indicators display correctly
5. Test background sync with service workers
6. Verify application performance with large offline datasets
