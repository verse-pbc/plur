# Task ID: 33
# Title: Implement Post Removal Capability for Organizers
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Add functionality that allows event organizers to remove inappropriate or unwanted user posts across both web and native applications.
# Details:
This task involves implementing a post removal feature for organizers across all platforms:

1. Backend Implementation:
   - Create a new API endpoint for post removal (e.g., DELETE /api/posts/:postId)
   - Implement proper authorization checks to ensure only organizers can remove posts
   - Add soft deletion to maintain post history while hiding content from users
   - Implement notification system to inform users when their posts are removed
   - Create an audit log to track post removals with timestamps and organizer information

2. Web Application:
   - Add a "Remove Post" option in the post action menu visible only to organizers
   - Implement a confirmation dialog explaining the consequences of post removal
   - Update the UI to handle removed posts gracefully (e.g., "This post has been removed")
   - Add visual feedback when a post is successfully removed

3. Native Applications (iOS/Android):
   - Implement the same functionality in both native apps
   - Ensure consistent UI/UX across platforms
   - Handle offline scenarios by queuing removal requests
   - Update local data stores to reflect post removals

4. Security Considerations:
   - Implement rate limiting to prevent abuse
   - Ensure proper validation of user roles and permissions
   - Add CSRF protection for web application
   - Log all removal actions for audit purposes

5. Documentation:
   - Update API documentation with the new endpoints
   - Create user documentation for organizers explaining the feature
   - Document the internal implementation for future maintenance

# Test Strategy:
Testing should be comprehensive across all platforms:

1. Unit Tests:
   - Test authorization logic to ensure only organizers can remove posts
   - Verify API endpoints handle valid and invalid requests correctly
   - Test data persistence and retrieval of removed posts

2. Integration Tests:
   - Verify the entire post removal flow works end-to-end
   - Test synchronization between backend and frontend
   - Ensure notifications are sent correctly when posts are removed

3. UI/UX Testing:
   - Verify the "Remove Post" option appears only for organizers
   - Test confirmation dialogs and error messages
   - Ensure removed posts are displayed appropriately in the UI

4. Cross-Platform Testing:
   - Test on web browsers (Chrome, Firefox, Safari, Edge)
   - Test on iOS devices (different iPhone and iPad models)
   - Test on Android devices (various manufacturers and OS versions)

5. Offline Testing:
   - Verify behavior when removing posts while offline
   - Test synchronization when connection is restored

6. Security Testing:
   - Attempt to remove posts without proper authorization
   - Test for CSRF vulnerabilities
   - Verify rate limiting functionality

7. User Acceptance Testing:
   - Have organizers test the feature in a staging environment
   - Collect feedback on usability and functionality
   - Verify the feature meets the requirements for the Oslo Freedom Forum

8. Performance Testing:
   - Measure impact on application performance
   - Test with large numbers of posts and users

# Subtasks:
## 1. Implement user removal (ban/kick) by group admins [done]
### Dependencies: None
### Description: Allow group admins to remove (ban or kick) users from a group by publishing a NIP-29-compliant moderation event referencing the user's pubkey. Clients must interpret these events and prevent banned users from posting or viewing group content. Ensure this meets Apple App Store requirements for user safety and moderation.
### Details:
<info added on 2025-05-17T13:15:52.061Z>
## Implementation Plan for User Removal/Ban System

### 1. Data Structure & Protocol
- Use event kind 16402 (GroupModeration) for group moderation actions involving users
- Required tags:
  - 'h' tag: group ID
  - 'p' tag: pubkey of user being banned/removed
  - 'action' tag: value 'remove'
  - 'type' tag: value 'user'
  - 'reason' tag: optional removal reason
  - 'duration' tag: optional ban duration in seconds (for temporary bans)

### 2. Backend Implementation
- Enhance NIP29 class in `packages/nostr_sdk/lib/nip29/nip29.dart`:
  - Implement `banUser(Nostr, GroupIdentifier, String pubkey, {String? reason, int? duration})` method
  - Method should create and send a properly formatted moderation event
  - Include optional parameters for reason and ban duration
- Enhance GroupProvider in `lib/provider/group_provider.dart`:
  - Implement high-level `banUser(GroupIdentifier, String pubkey, {String? reason, int? duration})` method
  - Add proper authorization checks to ensure only admins can ban users
  - Implement comprehensive logging for debugging and audit purposes
- Expand ModerationService in `lib/service/moderation_service.dart`:
  - Add capability to track and cache banned users
  - Subscribe to user ban events for real-time updates
  - Implement methods to check if a user is banned in a specific group

### 3. UI Implementation
- Add UI components in the Report Management Screen (`lib/router/group/moderation/report_management_screen.dart`):
  - Enhance the existing placeholder "Ban User" button with actual functionality
  - Create a ban confirmation dialog with:
    - Reason input field
    - Ban duration options (permanent/temporary)
    - Clear warning about the action's consequences
- Add Ban User option in Group Members screen:
  - Modify `lib/router/group/group_members_view.dart` to add context menu with ban option for admins
  - Ensure admin check is performed before showing the option
- Create User Ban Feedback:
  - Design UI elements to indicate when a user is banned
  - Implement appropriate error messages when banned users try to interact with the group

### 4. Client-Side Enforcement
- Modify content creation to prevent banned users from posting:
  - Update posting logic to check ban status before allowing content creation
  - Show appropriate error messages for banned users attempting to post
- Update feed filtering to hide content from banned users:
  - Modify content fetching/display logic to filter out banned users' content
  - Add visual indicators for removed content with appropriate messaging

### 5. Testing Strategy
- Unit Tests:
  - Test event creation and formatting
  - Test permission validation logic
  - Test ban duration calculation
- Integration Tests:
  - Test end-to-end ban flow from admin UI to event creation
  - Test enforcement of bans for content creation
  - Test content filtering for banned users
- UI/UX Tests:
  - Test admin interface for banning users
  - Test error messages shown to banned users
  - Test visual indicators for banned user content

### 6. Implementation Steps
1. Modify the NIP29 class to add the banUser method
2. Update GroupProvider to implement the higher-level ban functionality
3. Expand ModerationService to track banned users
4. Implement the ban confirmation dialog UI
5. Update the Report Management screen to enable the Ban User button
6. Add ban functionality to the Group Members screen
7. Implement client-side enforcement for content creation and viewing
8. Add comprehensive logging throughout the system
9. Test the implementation thoroughly across all platforms
</info added on 2025-05-17T13:15:52.061Z>
<info added on 2025-05-17T13:17:28.867Z>
## Implementation Plan for User Removal from Groups

### 1. Data Structure & Protocol
- Use event kind 16402 (GroupModeration) for group moderation actions
- Required tags:
  - 'h' tag: group ID
  - 'p' tag: pubkey of user being removed
  - 'action' tag: value 'remove'
  - 'type' tag: value 'user'
  - 'reason' tag: optional removal reason

### 2. Backend Implementation
- Enhance NIP29 class in `packages/nostr_sdk/lib/nip29/nip29.dart`:
  - Implement `removeUser(Nostr, GroupIdentifier, String pubkey, {String? reason})` method
  - Method should create and send a properly formatted moderation event
- Enhance GroupProvider in `lib/provider/group_provider.dart`:
  - Implement high-level `removeUser(GroupIdentifier, String pubkey, {String? reason})` method
  - Add proper authorization checks to ensure only admins can remove users
  - Implement comprehensive logging for debugging

### 3. UI Implementation
- Add UI components in the Group Members Screen:
  - Add a "Remove User" option in the context menu for group admins
  - Create a confirmation dialog with:
    - Explanation text
    - Optional reason input field
    - Cancel/Confirm buttons
- Add a "Remove User" option in the Report Management screen for user reports

### 4. Implementation Steps
1. Modify the NIP29 class to enhance the removeUser method
2. Update GroupProvider to implement the higher-level removal functionality with admin checks
3. Implement the removal confirmation dialog UI
4. Add the "Remove User" option to appropriate screens
5. Add comprehensive logging throughout the system
6. Test the implementation
</info added on 2025-05-17T13:17:28.867Z>
<info added on 2025-05-17T13:50:40.963Z>
The implementation of the user ban system has been completed with all core functionality in place. The system now allows group admins to ban users with the following features:

1. Backend Implementation:
   - Successfully implemented the `banUser` method in the NIP29 class that creates properly formatted ban events
   - Added a `banUser` method to GroupProvider with proper admin permission validation
   - Enhanced ModerationService with comprehensive ban management capabilities:
     - Storage of ban events with expiration tracking
     - Methods to check if users are banned from specific groups
     - Support for retrieving ban reasons and expiration times

2. UI Implementation:
   - Created a UserBanDialog component with options for:
     - Specifying ban reasons
     - Setting ban duration (permanent or temporary)
     - Configuring notification preferences
   - Added ban functionality to the Group Members screen
   - Integrated ban options into the Report Management screen

3. Protocol Compliance:
   - Implementation follows NIP-29 protocol for group moderation
   - Uses proper event kind 16402 (GroupModeration)
   - Includes all required tags:
     - 'h' tag: group ID
     - 'p' tag: pubkey of banned user
     - 'action' tag: value 'ban'
     - 'type' tag: value 'user'
     - 'reason' tag: optional ban reason
     - 'duration' tag: optional ban duration for temporary bans

4. Client-Side Enforcement:
   - Banned users are prevented from posting to groups
   - Clear messaging is displayed to banned users explaining their restriction

The implementation successfully meets the requirements for user moderation in groups and provides a complete solution for group admins to manage problematic users.
</info added on 2025-05-17T13:50:40.963Z>

## 2. Implement moderation notification DMs for users [pending]
### Dependencies: None
### Description: Create a system that automatically sends direct messages to users when they are kicked out of a group, and allow admins to manually send moderation-related messages to users regarding issues. Provide transparent communication about moderation decisions.
### Details:
<info added on 2025-05-17T13:17:49.439Z>
This subtask involves creating a comprehensive moderation notification system using Nostr's direct messaging capabilities. The implementation will focus on two main components:

1. Automatic Notification System:
   - Implement automatic DM sending when users are removed from a group
   - Use NIP-04 encrypted direct messages with structured content:
     - Clear subject line: "Moderation Notice: [Group Name]"
     - Complete group context (name, identifier)
     - Explanation of removal with reason when provided
     - Optional appeal process information

2. Admin Manual Messaging Interface:
   - Develop a user-friendly UI for admins to send moderation messages
   - Add "Message User" option in admin context menus
   - Create message composition dialog with:
     - Pre-configured templates for common moderation scenarios
     - Custom message capability
     - Automatic inclusion of group context
     - Message preview functionality

3. Integration with User Removal Process:
   - Connect notification system with the user removal functionality
   - Trigger notifications automatically after successful removal
   - Include relevant context about the removal action
   - Attribute messages to the admin who performed the action

4. Technical Implementation:
   - Leverage Nostr's NIP-04 for secure direct messaging
   - Create service methods for moderation messaging:
     - `sendModerationDM(recipient, groupContext, reason, adminPubkey)`
     - `createModTemplate(templateType, groupName, customText)`
   - Implement UI components for the messaging system
   - Develop error handling for message delivery failures

5. Implementation Sequence:
   - Design and create message templates
   - Build core DM functionality using NIP-04
   - Implement admin messaging interface
   - Connect with user removal process
   - Conduct thorough testing across different scenarios
   - Add robust error handling
</info added on 2025-05-17T13:17:49.439Z>

## 3. Implement user removal and moderation notifications [done]
### Dependencies: None
### Description: Allow group admins to remove users from groups by publishing NIP-29 moderation events, and implement automatic DM notifications to removed users. Add functionality for admins to send moderation-related messages directly to users.
### Details:
<info added on 2025-05-17T13:19:03.087Z>
# Implementation Plan for User Removal and Moderation Notifications

## 1. User Removal from Groups
- Implement NIP-29 moderation events (kind 16402 - GroupModeration) with required tags:
  - 'h' tag: group ID
  - 'p' tag: pubkey of user being removed
  - 'action' tag: value 'remove'
  - 'type' tag: value 'user'
  - 'reason' tag: optional removal reason
- Enhance NIP29 class in packages/nostr_sdk/lib/nip29/nip29.dart:
  - Add removeUser(Nostr, GroupIdentifier, String pubkey, {String? reason}) method
- Update GroupProvider in lib/provider/group_provider.dart:
  - Implement removeUser(GroupIdentifier, String pubkey, {String? reason}) method
  - Add authorization checks to ensure only admins can perform removals

## 2. Automatic Notification for Removed Users
- Create a system to send NIP-04 encrypted direct messages to removed users containing:
  - Subject line: "Moderation Notice: [Group Name]"
  - Group information (name, ID)
  - Removal reason (if provided)
  - Appeal information (optional)
- Trigger notification automatically after successful user removal

## 3. Admin Manual Messaging System
- Develop UI components for admins to send moderation messages:
  - "Message User" option in user context menus
  - Message composition dialog with templates and custom message options
  - Automatic inclusion of group context information

## 4. UI Implementation
- Enhance Group Members Screen with:
  - "Remove User" option in context menu (admin-only)
  - Confirmation dialog with reason input and notification options
  - "Message User" option in admin interfaces
  - Message composition dialog

## 5. Implementation Steps
1. Modify NIP29 class for user removal functionality
2. Update GroupProvider with removal methods and authorization
3. Create DM service for moderation notifications
4. Implement UI components for removal and messaging
5. Connect automatic notifications to the removal process
6. Add logging and thorough testing
</info added on 2025-05-17T13:19:03.087Z>
<info added on 2025-05-17T13:22:55.163Z>
The implementation of the user removal and moderation notification system has been successfully completed in the Plur application. The implementation follows the planned approach with the following components:

1. Backend Implementation:
   - Added `removeUser` method to the NIP29 class in `packages/nostr_sdk/lib/nip29/nip29.dart` that creates user moderation events with the required tags (h, p, action, type, reason)
   - Implemented `removeUser` in the GroupProvider with proper admin authorization checks to ensure only group admins can remove users
   - Created a ModerationDmUtil class that handles sending encrypted direct messages to removed users with appropriate notification content

2. UI Implementation:
   - Developed a UserRemoveDialog component that includes:
     - Optional reason input field for admins to explain the removal
     - Toggle option to enable/disable notification DMs
     - Loading state indicators and error handling mechanisms
   - Added "Remove User" option to the context menus in both the Group Members screen and Report Management screen
   - Implemented feedback messages to inform admins about the success or failure of removal actions

3. Integration:
   - Connected the user removal functionality with the automatic DM notification system
   - Added all necessary string localizations for new UI elements to support internationalization
   - Implemented comprehensive error handling and logging throughout the system
   - Ensured the implementation follows the same pattern and structure as the existing post removal functionality

The system now allows group admins to effectively moderate their groups by removing problematic users while providing appropriate notifications to those users. The implementation is complete, well-integrated with existing systems, and handles error cases gracefully with appropriate feedback mechanisms.
</info added on 2025-05-17T13:22:55.163Z>

